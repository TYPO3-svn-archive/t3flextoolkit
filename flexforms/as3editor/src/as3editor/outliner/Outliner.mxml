<?xml version="1.0" encoding="utf-8"?>
<mx:Tree creationComplete="init()" itemClick="itemClickHandler(event)" xmlns:mx="http://www.adobe.com/2006/mxml" showRoot="true" labelFunction="setLabel" iconFunction="setIcons" iconField="@icon" >
	<mx:Metadata>
      [Event(name="dataConstructed", type="as3editor.outliner.OutlinerEvent")]
      [Event(name="outlineItemClick", type="as3editor.outliner.OutlinerEvent")]
      
	</mx:Metadata>
	<mx:Script>
		<![CDATA[
		import mx.events.ListEvent;
		import mx.collections.XMLListCollection;
		import nl.mopics.collections.iterators.IIterator;
		import nl.mopics.collections.LinkedList;
		import as3editor.outliner.*;
		import as3editor.outliner.data.*;
		import as3editor.outliner.icons.IconRefs;
		
		private var ol:OutLineClass;
		private var oldata:OutlineData;
		private var source:String;
		private var isbusy:Boolean = false;
		
		public var event:OutlinerEvent;
		
		include 'icons/Icons.as';
		
		
		private function init():void
		{
			ol = new OutLineClass();
			//add internal event handlers
			ol.addEventListener( OutlineDataEvent.TOTAL_UPDATE, onSourceUpdate );
		}
		
		/**
		 * Constructs this outliner via appropiate XML ( see //TODO ?doc how this xml should be layed out )
		 * @param	xml
		 */
		public function constructFromXML( xml:XML, src:String ):void
		{
			source = src;
			dataProvider = new XMLListCollection(new XMLList(xml));
			this.dispatchEvent(new OutlinerEvent( OutlinerEvent.DATA_CONSTRUCTED ) );
		}
		/**
		 * Analizes an entire class-source-code
		 * @param	source
		 */
		public function contructFromSource( src:String ):void
		{
			isbusy = true;
			ol.contructFromSource(src );
			source = src;
		}
		/**
		 * Returns OutlinerData as XML to be stored within the corresponding typo3 page-id
		 */
		public function getXML():XML
		{
			if( !isbusy )
				return XML(dataProvider);
			else
				return new XML();
		}
		
		private function itemClickHandler(event:ListEvent):void
		{
			//get item member-type and name and match this in this source code;
			var e2:OutlinerEvent = new OutlinerEvent( OutlinerEvent.ON_OL_ITEM_CLICK );
			e2.match = event.currentTarget.selectedItem.@match;
			e2.beginIndex = source.indexOf(e2.match);
			e2.endIndex = e2.beginIndex+e2.match.length;
			dispatchEvent( e2 );
		}
		private function onSourceUpdate( evt:OutlineDataEvent ):void
		{
			//iterate thru outlinedata and construct a dataProvider
			var pack:XML   = <pack label="oldata.packagePath" iconType=""/>;
			pack.@label    = ol.getData().packagePath;
			pack.@iconType = IconRefs.ICN_PACKAGE;
			
			var imps:XML   = <imps label="" iconType="" />;
			imps.@label    = "imports";
			imps.@iconType = IconRefs.ICN_IMPORTS;
			
			//iterate thru imports
			
			var itr:IIterator = ol.getData().imports.iterator();
			if( itr.getCurrent() )
			{
				imps.appendChild( itr.getCurrent().getOutlineViewNode() );
				while( itr.hasNext() )
				{
					imps.appendChild( itr.next().getOutlineViewNode() );
				}
			}
			pack.appendChild(imps);
			
				
			//iterate thru classes
			itr = ol.getData().classes.iterator();
			if( itr.getCurrent() )
			{
				pack.appendChild( itr.getCurrent().getOutlineViewNode() )
				while( itr.hasNext() )
				{
					pack.appendChild(itr.next().getOutlineViewNode());
				}
			}
			//last but not least
			dataProvider = new XMLListCollection(new XMLList(pack));
			
			//
			isbusy = false;
			this.dispatchEvent(new OutlinerEvent( OutlinerEvent.DATA_CONSTRUCTED ) );
		}
		private function setLabel(item:Object):String
		{
			return XML(item).@label;
		}
		private function setIcons(item:Object):Class 
        { 
           var t:String = XML(item).@iconType;
           var icon:Class;
	       switch ( t )
	       { 
                case IconRefs.ICN_PACKAGE: 
                       icon = ICNpack; 
                       break; 
                case IconRefs.ICN_IMPORTS: 
                       icon = this.ICNimps; 
                        break; 
                case IconRefs.ICN_IMPORT: 
                       icon = this.ICNimp; 
                        break; 
                case IconRefs.ICN_CLASS: 
                       icon = this.ICNclass; 
                        break;
                case IconRefs.ICN_PUBLIC_VAR: 
                       icon = this.ICNpubVar; 
                        break;
                case IconRefs.ICN_PRIVATE_VAR: 
                       icon = this.ICNprivVar; 
                        break;
                case IconRefs.ICN_PUBLIC_METHOD: 
                       icon = this.ICNpubMeth; 
                        break;
                case IconRefs.ICN_PRIVATE_METHOD: 
                       icon = this.ICNprivMeth; 
                        break;
                case IconRefs.ICN_PUBLIC_CONST: 
                       icon = this.ICNpubConst; 
                        break;
                case IconRefs.ICN_PRIVATE_CONST: 
                       icon = this.ICNprivConst; 
                        break;
                case IconRefs.ICN_PUBLIC_CONST: 
                       icon = this.ICNpubConst; 
                        break;
                case IconRefs.ICN_SETGET: 
                       icon = this.ICNsetget; 
                        break;
                default: 
                       icon = this.ICNprivMeth; 
                        break; 
            } 
            return icon; 
         }
		
		]]>
	</mx:Script>
</mx:Tree>
